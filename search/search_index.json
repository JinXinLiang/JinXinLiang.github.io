{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4f7f\u7528\u624b\u518c \u5de6\u4fa7\u5bfc\u822a\u5217\u8868 \u4e3a\u5de5\u7a0b\u6587\u4ef6\u7d22\u5f15\uff0c \u53f3\u4fa7\u7d22\u5f15 \u4e3aAPI\u7d22\u5f15\u3002 \u65f6\u95f4\u7684\u5173\u7cfb\u76ee\u524d\u534a\u6210\u54c1\uff0c\u642d\u5efa\u4e86\u6574\u4f53\u7684\u6587\u4ef6\u6846\u67b6\uff0c\u4f46\u662f\u53ea\u6709 \u7ecf\u7eac\u5ea6\u5339\u914d \u9879\u76ee\u4fe1\u606f\u662f\u5168\u7684\uff0c Sms_send \u548c Spider \u53ea\u5199\u4e86\u6982\u8ff0\uff0c\u6ca1\u6709\u5199\u5177\u4f53\u6587\u4ef6\u548c\u7c7b\u7684API\uff0c\u53ef\u4ee5\u770b\u6982\u8ff0\u4e86\u89e3\u6574\u4e2a\u5de5\u7a0b\u5927\u6982\u662f\u4ec0\u4e48\u4e1a\u52a1\u529f\u80fd","title":"\u4f7f\u7528\u624b\u518c"},{"location":"#_1","text":"\u5de6\u4fa7\u5bfc\u822a\u5217\u8868 \u4e3a\u5de5\u7a0b\u6587\u4ef6\u7d22\u5f15\uff0c \u53f3\u4fa7\u7d22\u5f15 \u4e3aAPI\u7d22\u5f15\u3002 \u65f6\u95f4\u7684\u5173\u7cfb\u76ee\u524d\u534a\u6210\u54c1\uff0c\u642d\u5efa\u4e86\u6574\u4f53\u7684\u6587\u4ef6\u6846\u67b6\uff0c\u4f46\u662f\u53ea\u6709 \u7ecf\u7eac\u5ea6\u5339\u914d \u9879\u76ee\u4fe1\u606f\u662f\u5168\u7684\uff0c Sms_send \u548c Spider \u53ea\u5199\u4e86\u6982\u8ff0\uff0c\u6ca1\u6709\u5199\u5177\u4f53\u6587\u4ef6\u548c\u7c7b\u7684API\uff0c\u53ef\u4ee5\u770b\u6982\u8ff0\u4e86\u89e3\u6574\u4e2a\u5de5\u7a0b\u5927\u6982\u662f\u4ec0\u4e48\u4e1a\u52a1\u529f\u80fd","title":"\u4f7f\u7528\u624b\u518c"},{"location":"sms_send/DataBaseHandle/","text":"\u6982\u8ff0 \u77ed\u4fe1\u63d0\u9192\u53d1\u9001\u76f8\u5173\u811a\u672c\u5de5\u5177\u5305\uff0c\u7528\u4e8e\u53d1\u9001\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u7684\u77ed\u4fe1\u63d0\u9192 job\uff1a\u5177\u4f53\u7684\u4e1a\u52a1\u77ed\u4fe1\u53d1\u9001\u811a\u672c \u7528\u6237\u8ba2\u5355\u4f4e\u91cc\u7a0b\u77ed\u4fe1\u63d0\u9192 \u516c\u52a1\u7528\u8f66\u8ba2\u5355\u77ed\u4fe1\u63d0\u9192 spider\uff1a\u6570\u636e\u83b7\u53d6\u722c\u866b excel_download\uff1a\u4e0b\u8f7d.xls\u6587\u4ef6: \u8f66\u8f86\u4fe1\u606f\u8868car_info\u3001\u8f66\u8f86\u4e0a\u4e0b\u7ebf\u8868car_history_info\u3001\u5de5\u5355\u8868work_order \u5de5\u5355(\u5de5\u5355\u72b6\u6001/\u5b8c\u6210\u5f00\u59cb\u65f6\u95f4/\u5b8c\u6210\u7ed3\u675f\u65f6\u95f4)[\u5b8c\u6210\u7684\u65f6\u95f4\u8282\u70b9\u5185\u7684/\u672a\u5b8c\u6210\u7684\u6ca1\u6709\u65f6\u95f4\u8282\u70b9] \u8f66\u8f86\u5f53\u524d\u4fe1\u606f(\u65e0) \u8f66\u8f86\u5386\u53f2\u72b6\u6001(\u5f00\u59cb\u65f6\u95f4/\u7ed3\u675f\u65f6\u95f4) official_car_order_spider\uff1a\u516c\u52a1\u8f66\u8ba2\u5355\u4fe1\u606f\u722c\u866b picked_up_user_order_spider: \u7528\u6237\u8ba2\u5355\u63d0\u53d6\u722c\u866b tools\uff1a\u811a\u672c\u5f00\u53d1\u5de5\u5177\u5305 DataBaseHandle: \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b ExcelHandle: \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b InsertDataIntoMysql: DataInfo\u6570\u636e\u6a21\u578b\u6301\u4e45\u5316\u5de5\u5177\u5c01\u88c5 SMS_Remind|TC_SMS_Remind\uff08TC\u542b\u4e49\u4e0d\u8be6\uff0c\u6682\u5f52\u4e00\u7c7b\uff09: \u77ed\u4fe1\u63d0\u9192\u5de5\u5177\u5c01\u88c5\uff0cSmsClass\u7684\u4e0a\u5c42\u5c01\u88c5 SmsClass: \u53d1\u9001\u77ed\u4fe1\u63a5\u53e3\u8bf7\u6c42\u5c01\u88c5","title":"\u6982\u8ff0"},{"location":"sms_send/DataBaseHandle/#_1","text":"\u77ed\u4fe1\u63d0\u9192\u53d1\u9001\u76f8\u5173\u811a\u672c\u5de5\u5177\u5305\uff0c\u7528\u4e8e\u53d1\u9001\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u7684\u77ed\u4fe1\u63d0\u9192","title":"\u6982\u8ff0"},{"location":"sms_send/DataBaseHandle/#job","text":"\u7528\u6237\u8ba2\u5355\u4f4e\u91cc\u7a0b\u77ed\u4fe1\u63d0\u9192 \u516c\u52a1\u7528\u8f66\u8ba2\u5355\u77ed\u4fe1\u63d0\u9192","title":"job\uff1a\u5177\u4f53\u7684\u4e1a\u52a1\u77ed\u4fe1\u53d1\u9001\u811a\u672c"},{"location":"sms_send/DataBaseHandle/#spider","text":"excel_download\uff1a\u4e0b\u8f7d.xls\u6587\u4ef6: \u8f66\u8f86\u4fe1\u606f\u8868car_info\u3001\u8f66\u8f86\u4e0a\u4e0b\u7ebf\u8868car_history_info\u3001\u5de5\u5355\u8868work_order \u5de5\u5355(\u5de5\u5355\u72b6\u6001/\u5b8c\u6210\u5f00\u59cb\u65f6\u95f4/\u5b8c\u6210\u7ed3\u675f\u65f6\u95f4)[\u5b8c\u6210\u7684\u65f6\u95f4\u8282\u70b9\u5185\u7684/\u672a\u5b8c\u6210\u7684\u6ca1\u6709\u65f6\u95f4\u8282\u70b9] \u8f66\u8f86\u5f53\u524d\u4fe1\u606f(\u65e0) \u8f66\u8f86\u5386\u53f2\u72b6\u6001(\u5f00\u59cb\u65f6\u95f4/\u7ed3\u675f\u65f6\u95f4) official_car_order_spider\uff1a\u516c\u52a1\u8f66\u8ba2\u5355\u4fe1\u606f\u722c\u866b picked_up_user_order_spider: \u7528\u6237\u8ba2\u5355\u63d0\u53d6\u722c\u866b","title":"spider\uff1a\u6570\u636e\u83b7\u53d6\u722c\u866b"},{"location":"sms_send/DataBaseHandle/#tools","text":"DataBaseHandle: \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b ExcelHandle: \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b InsertDataIntoMysql: DataInfo\u6570\u636e\u6a21\u578b\u6301\u4e45\u5316\u5de5\u5177\u5c01\u88c5 SMS_Remind|TC_SMS_Remind\uff08TC\u542b\u4e49\u4e0d\u8be6\uff0c\u6682\u5f52\u4e00\u7c7b\uff09: \u77ed\u4fe1\u63d0\u9192\u5de5\u5177\u5c01\u88c5\uff0cSmsClass\u7684\u4e0a\u5c42\u5c01\u88c5 SmsClass: \u53d1\u9001\u77ed\u4fe1\u63a5\u53e3\u8bf7\u6c42\u5c01\u88c5","title":"tools\uff1a\u811a\u672c\u5f00\u53d1\u5de5\u5177\u5305"},{"location":"sms_send/config/","text":"config Official_Car_Order_BASE_PATH \u8c03\u5ea6\u4efb\u52a1\u8f93\u51fa\u914d\u7f6e one_page_size geo_fence_spider \u76f8\u5173\u914d\u7f6e","title":"config"},{"location":"sms_send/config/#config","text":"","title":"config"},{"location":"sms_send/config/#sms_send.config.Official_Car_Order_BASE_PATH","text":"\u8c03\u5ea6\u4efb\u52a1\u8f93\u51fa\u914d\u7f6e","title":"Official_Car_Order_BASE_PATH"},{"location":"sms_send/config/#sms_send.config.one_page_size","text":"geo_fence_spider \u76f8\u5173\u914d\u7f6e","title":"one_page_size"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/","text":"DataBaseHandle DataBaseHandle \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 Source code in tools/DataBaseHandle.py class DataBaseHandle ( object ): \"\"\" \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 \"\"\" # \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () # \u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows # rows\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93 def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u5220\u9664\u6570\u636e\u5e93\u6570\u636e def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u67e5\u8be2\u6570\u636e def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data __init__ ( self , hostname , port , user , password , db ) special \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 Source code in tools/DataBaseHandle.py def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () delete_mysql_data ( self , delete_SQL ) \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) insert_mysql_data ( self , table_name , data , data_type , insert_type = 'replace' ) \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) null_value_replace ( data , data_type ) staticmethod \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 Source code in tools/DataBaseHandle.py @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows select_mysql_data ( self , select_sql ) \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c Source code in tools/DataBaseHandle.py def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"DataBaseHandle"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#databasehandle","text":"","title":"DataBaseHandle"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#lat_lng.tools.DataBaseHandle.DataBaseHandle","text":"\u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 Source code in tools/DataBaseHandle.py class DataBaseHandle ( object ): \"\"\" \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 \"\"\" # \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () # \u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows # rows\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93 def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u5220\u9664\u6570\u636e\u5e93\u6570\u636e def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u67e5\u8be2\u6570\u636e def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"DataBaseHandle"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#lat_lng.tools.DataBaseHandle.DataBaseHandle.__init__","text":"\u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 Source code in tools/DataBaseHandle.py def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor ()","title":"__init__()"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#lat_lng.tools.DataBaseHandle.DataBaseHandle.delete_mysql_data","text":"\u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" )","title":"delete_mysql_data()"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#lat_lng.tools.DataBaseHandle.DataBaseHandle.insert_mysql_data","text":"\u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" )","title":"insert_mysql_data()"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#lat_lng.tools.DataBaseHandle.DataBaseHandle.null_value_replace","text":"\u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 Source code in tools/DataBaseHandle.py @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows","title":"null_value_replace()"},{"location":"sms_send/%E6%A6%82%E8%BF%B0/#lat_lng.tools.DataBaseHandle.DataBaseHandle.select_mysql_data","text":"\u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c Source code in tools/DataBaseHandle.py def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"select_mysql_data()"},{"location":"sms_send/job/low_mileage_pickup_order_SMS_reminder/Low_Mileage_SMS_Remind/","text":"Low_Mileage_SMS_Remind","title":"Low_Mileage_SMS_Remind"},{"location":"sms_send/job/low_mileage_pickup_order_SMS_reminder/Low_Mileage_SMS_Remind/#low_mileage_sms_remind","text":"","title":"Low_Mileage_SMS_Remind"},{"location":"sms_send/job/low_mileage_pickup_order_SMS_reminder/SMS_reminder/","text":"SMS_reminder","title":"SMS_reminder"},{"location":"sms_send/job/low_mileage_pickup_order_SMS_reminder/SMS_reminder/#sms_reminder","text":"","title":"SMS_reminder"},{"location":"sms_send/job/low_mileage_pickup_order_SMS_reminder/TC_Low_Mileage_SMS_Remind/","text":"TC_Low_Mileage_SMS_Remind","title":"TC_Low_Mileage_SMS_Remind"},{"location":"sms_send/job/low_mileage_pickup_order_SMS_reminder/TC_Low_Mileage_SMS_Remind/#tc_low_mileage_sms_remind","text":"","title":"TC_Low_Mileage_SMS_Remind"},{"location":"sms_send/job/low_mileage_remind/low_mileage_remind/","text":"low_mileage_remind","title":"low_mileage_remind"},{"location":"sms_send/job/low_mileage_remind/low_mileage_remind/#low_mileage_remind","text":"","title":"low_mileage_remind"},{"location":"sms_send/job/official_car_order_remind/Official_Order_SMS_Remind/","text":"Official_Order_SMS_Remind","title":"Official_Order_SMS_Remind"},{"location":"sms_send/job/official_car_order_remind/Official_Order_SMS_Remind/#official_order_sms_remind","text":"","title":"Official_Order_SMS_Remind"},{"location":"sms_send/job/official_car_order_remind/TC_Official_Order_SMS_Remind/","text":"TC_Official_Order_SMS_Remind","title":"TC_Official_Order_SMS_Remind"},{"location":"sms_send/job/official_car_order_remind/TC_Official_Order_SMS_Remind/#tc_official_order_sms_remind","text":"","title":"TC_Official_Order_SMS_Remind"},{"location":"sms_send/job/official_car_order_remind/official_car_order_remind/","text":"official_car_order_remind","title":"official_car_order_remind"},{"location":"sms_send/job/official_car_order_remind/official_car_order_remind/#official_car_order_remind","text":"","title":"official_car_order_remind"},{"location":"sms_send/spider/excel_download/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"sms_send/spider/excel_download/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"sms_send/spider/excel_download/MojieDownloadExcel/","text":"MojieDownloadExcel","title":"MojieDownloadExcel"},{"location":"sms_send/spider/excel_download/MojieDownloadExcel/#mojiedownloadexcel","text":"","title":"MojieDownloadExcel"},{"location":"sms_send/spider/official_car_order_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"sms_send/spider/official_car_order_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"sms_send/spider/official_car_order_spider/OfficialCarOrderSpider/","text":"OfficialCarOrderSpider","title":"OfficialCarOrderSpider"},{"location":"sms_send/spider/official_car_order_spider/OfficialCarOrderSpider/#officialcarorderspider","text":"","title":"OfficialCarOrderSpider"},{"location":"sms_send/spider/picked_up_user_order_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"sms_send/spider/picked_up_user_order_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"sms_send/spider/picked_up_user_order_spider/PickedUpUserOrderSpider/","text":"PickedUpUserOrderSpider","title":"PickedUpUserOrderSpider"},{"location":"sms_send/spider/picked_up_user_order_spider/PickedUpUserOrderSpider/#pickedupuserorderspider","text":"","title":"PickedUpUserOrderSpider"},{"location":"sms_send/tools/DataBaseHandle/","text":"DataBaseHandle DataBaseHandle \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 Source code in tools/DataBaseHandle.py class DataBaseHandle ( object ): \"\"\" \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 \"\"\" # \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () # \u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows # rows\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93 def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u5220\u9664\u6570\u636e\u5e93\u6570\u636e def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u67e5\u8be2\u6570\u636e def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data __init__ ( self , hostname , port , user , password , db ) special \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 Source code in tools/DataBaseHandle.py def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () delete_mysql_data ( self , delete_SQL ) \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) insert_mysql_data ( self , table_name , data , data_type , insert_type = 'replace' ) \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) null_value_replace ( data , data_type ) staticmethod \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 Source code in tools/DataBaseHandle.py @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows select_mysql_data ( self , select_sql ) \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c Source code in tools/DataBaseHandle.py def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"DataBaseHandle"},{"location":"sms_send/tools/DataBaseHandle/#databasehandle","text":"","title":"DataBaseHandle"},{"location":"sms_send/tools/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle","text":"\u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 Source code in tools/DataBaseHandle.py class DataBaseHandle ( object ): \"\"\" \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 \"\"\" # \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () # \u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows # rows\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93 def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u5220\u9664\u6570\u636e\u5e93\u6570\u636e def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u67e5\u8be2\u6570\u636e def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"DataBaseHandle"},{"location":"sms_send/tools/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.__init__","text":"\u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 Source code in tools/DataBaseHandle.py def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor ()","title":"__init__()"},{"location":"sms_send/tools/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.delete_mysql_data","text":"\u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" )","title":"delete_mysql_data()"},{"location":"sms_send/tools/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.insert_mysql_data","text":"\u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" )","title":"insert_mysql_data()"},{"location":"sms_send/tools/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.null_value_replace","text":"\u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 Source code in tools/DataBaseHandle.py @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows","title":"null_value_replace()"},{"location":"sms_send/tools/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.select_mysql_data","text":"\u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c Source code in tools/DataBaseHandle.py def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"select_mysql_data()"},{"location":"sms_send/tools/ExcelHandle/","text":"ExcelHandle","title":"ExcelHandle"},{"location":"sms_send/tools/ExcelHandle/#excelhandle","text":"","title":"ExcelHandle"},{"location":"sms_send/tools/InsertDataIntoMysql/","text":"InsertDataIntoMysql","title":"InsertDataIntoMysql"},{"location":"sms_send/tools/InsertDataIntoMysql/#insertdataintomysql","text":"","title":"InsertDataIntoMysql"},{"location":"sms_send/tools/SMS_Remind/","text":"SMS_Remind","title":"SMS_Remind"},{"location":"sms_send/tools/SMS_Remind/#sms_remind","text":"","title":"SMS_Remind"},{"location":"sms_send/tools/SmsClass/","text":"SmsClass","title":"SmsClass"},{"location":"sms_send/tools/SmsClass/#smsclass","text":"","title":"SmsClass"},{"location":"sms_send/tools/TC_SMS_Remind/","text":"TC_SMS_Remind","title":"TC_SMS_Remind"},{"location":"sms_send/tools/TC_SMS_Remind/#tc_sms_remind","text":"","title":"TC_SMS_Remind"},{"location":"spider/%E6%A6%82%E8%BF%B0/","text":"\u6982\u8ff0 \u5177\u4f53\u4e1a\u52a1\u7684\u6570\u636e\u722c\u866b excel_download\uff1a\u4e0b\u8f7d.xls\u6587\u4ef6: \u8f66\u8f86\u4fe1\u606f\u8868car_info\u3001\u8f66\u8f86\u4e0a\u4e0b\u7ebf\u8868car_history_info\u3001\u5de5\u5355\u8868work_order \u5de5\u5355(\u5de5\u5355\u72b6\u6001/\u5b8c\u6210\u5f00\u59cb\u65f6\u95f4/\u5b8c\u6210\u7ed3\u675f\u65f6\u95f4)[\u5b8c\u6210\u7684\u65f6\u95f4\u8282\u70b9\u5185\u7684/\u672a\u5b8c\u6210\u7684\u6ca1\u6709\u65f6\u95f4\u8282\u70b9] \u8f66\u8f86\u5f53\u524d\u4fe1\u606f(\u65e0) \u8f66\u8f86\u5386\u53f2\u72b6\u6001(\u5f00\u59cb\u65f6\u95f4/\u7ed3\u675f\u65f6\u95f4) geo_fence_spider: \u7535\u5b50\u56f4\u680f\u4fe1\u606f\u722c\u866b\uff1b network_spider\uff1a\u7f51\u70b9\u4fe1\u606f\u722c\u866b\uff1b order_spider | order_spider11: \u8ba2\u5355\u4fe1\u606f\u722c\u866b\uff1b official_car_order_spider\uff1a\u516c\u52a1\u8f66\u8ba2\u5355\u4fe1\u606f\u722c\u866b\uff1b picked_up_user_order_spider: \u7528\u6237\u8ba2\u5355\u63d0\u53d6\u722c\u866b\uff1b user_info_spider | user_info_spider2: \u767b\u5f55\u7528\u6237\u4fe1\u606f\u722c\u866b\uff1b work_order_spider: \u5de5\u5355\u4e1a\u52a1\u4fe1\u606f\u722c\u866b\uff0c\u5145\u7535\u5de5\u5355\uff0c\u6e05\u6d01\u5de5\u5355\uff0c\u52a0\u6cb9\u5de5\u5355\uff0c\u4fdd\u517b\u5de5\u5355\uff0c\u79fb\u8f66\u5de5\u5355\uff0c\u5176\u4ed6\u5de5\u5355\uff0c\u5de1\u68c0\u5de5\u5355\uff0c\u7ef4\u4fee\u5de5\u5355\uff0c\u6551\u63f4\u5de5\u5355\u7b49\u3002","title":"\u6982\u8ff0"},{"location":"spider/%E6%A6%82%E8%BF%B0/#_1","text":"\u5177\u4f53\u4e1a\u52a1\u7684\u6570\u636e\u722c\u866b excel_download\uff1a\u4e0b\u8f7d.xls\u6587\u4ef6: \u8f66\u8f86\u4fe1\u606f\u8868car_info\u3001\u8f66\u8f86\u4e0a\u4e0b\u7ebf\u8868car_history_info\u3001\u5de5\u5355\u8868work_order \u5de5\u5355(\u5de5\u5355\u72b6\u6001/\u5b8c\u6210\u5f00\u59cb\u65f6\u95f4/\u5b8c\u6210\u7ed3\u675f\u65f6\u95f4)[\u5b8c\u6210\u7684\u65f6\u95f4\u8282\u70b9\u5185\u7684/\u672a\u5b8c\u6210\u7684\u6ca1\u6709\u65f6\u95f4\u8282\u70b9] \u8f66\u8f86\u5f53\u524d\u4fe1\u606f(\u65e0) \u8f66\u8f86\u5386\u53f2\u72b6\u6001(\u5f00\u59cb\u65f6\u95f4/\u7ed3\u675f\u65f6\u95f4) geo_fence_spider: \u7535\u5b50\u56f4\u680f\u4fe1\u606f\u722c\u866b\uff1b network_spider\uff1a\u7f51\u70b9\u4fe1\u606f\u722c\u866b\uff1b order_spider | order_spider11: \u8ba2\u5355\u4fe1\u606f\u722c\u866b\uff1b official_car_order_spider\uff1a\u516c\u52a1\u8f66\u8ba2\u5355\u4fe1\u606f\u722c\u866b\uff1b picked_up_user_order_spider: \u7528\u6237\u8ba2\u5355\u63d0\u53d6\u722c\u866b\uff1b user_info_spider | user_info_spider2: \u767b\u5f55\u7528\u6237\u4fe1\u606f\u722c\u866b\uff1b work_order_spider: \u5de5\u5355\u4e1a\u52a1\u4fe1\u606f\u722c\u866b\uff0c\u5145\u7535\u5de5\u5355\uff0c\u6e05\u6d01\u5de5\u5355\uff0c\u52a0\u6cb9\u5de5\u5355\uff0c\u4fdd\u517b\u5de5\u5355\uff0c\u79fb\u8f66\u5de5\u5355\uff0c\u5176\u4ed6\u5de5\u5355\uff0c\u5de1\u68c0\u5de5\u5355\uff0c\u7ef4\u4fee\u5de5\u5355\uff0c\u6551\u63f4\u5de5\u5355\u7b49\u3002","title":"\u6982\u8ff0"},{"location":"spider/excel_download/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/excel_download/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/excel_download/MojieDownloadExcel/","text":"MojieDownloadExcel","title":"MojieDownloadExcel"},{"location":"spider/excel_download/MojieDownloadExcel/#mojiedownloadexcel","text":"","title":"MojieDownloadExcel"},{"location":"spider/geo_fence_spider/GeoFenceSpider/","text":"GeoFenceSpider","title":"GeoFenceSpider"},{"location":"spider/geo_fence_spider/GeoFenceSpider/#geofencespider","text":"","title":"GeoFenceSpider"},{"location":"spider/geo_fence_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/geo_fence_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/network_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/network_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/network_spider/NetworkConfig/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/network_spider/NetworkConfig/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/network_spider/NetworkSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/network_spider/NetworkSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/official_car_order_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/official_car_order_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/official_car_order_spider/OfficialCarOrderSpider/","text":"OfficialCarOrderSpider","title":"OfficialCarOrderSpider"},{"location":"spider/official_car_order_spider/OfficialCarOrderSpider/#officialcarorderspider","text":"","title":"OfficialCarOrderSpider"},{"location":"spider/order_spider/Spider3/","text":"Spider3","title":"Spider3"},{"location":"spider/order_spider/Spider3/#spider3","text":"","title":"Spider3"},{"location":"spider/order_spider/SpiderConfig/","text":"SpiderConfig","title":"SpiderConfig"},{"location":"spider/order_spider/SpiderConfig/#spiderconfig","text":"","title":"SpiderConfig"},{"location":"spider/order_spider/UrlRequest/","text":"UrlRequest","title":"UrlRequest"},{"location":"spider/order_spider/UrlRequest/#urlrequest","text":"","title":"UrlRequest"},{"location":"spider/order_spider1/Spider3/","text":"Spider3","title":"Spider3"},{"location":"spider/order_spider1/Spider3/#spider3","text":"","title":"Spider3"},{"location":"spider/order_spider1/SpiderConfig/","text":"SpiderConfig","title":"SpiderConfig"},{"location":"spider/order_spider1/SpiderConfig/#spiderconfig","text":"","title":"SpiderConfig"},{"location":"spider/order_spider1/UrlRequest/","text":"UrlRequest","title":"UrlRequest"},{"location":"spider/order_spider1/UrlRequest/#urlrequest","text":"","title":"UrlRequest"},{"location":"spider/picked_up_user_order_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/picked_up_user_order_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/picked_up_user_order_spider/PickedUpUserOrderSpider/","text":"PickedUpUserOrderSpider","title":"PickedUpUserOrderSpider"},{"location":"spider/picked_up_user_order_spider/PickedUpUserOrderSpider/#pickedupuserorderspider","text":"","title":"PickedUpUserOrderSpider"},{"location":"spider/user_info_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/user_info_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/user_info_spider/UserInfoSpider/","text":"UserInfoSpider","title":"UserInfoSpider"},{"location":"spider/user_info_spider/UserInfoSpider/#userinfospider","text":"","title":"UserInfoSpider"},{"location":"spider/user_info_spider_2/Spider3/","text":"Spider3","title":"Spider3"},{"location":"spider/user_info_spider_2/Spider3/#spider3","text":"","title":"Spider3"},{"location":"spider/user_info_spider_2/SpiderConfig/","text":"SpiderConfig","title":"SpiderConfig"},{"location":"spider/user_info_spider_2/SpiderConfig/#spiderconfig","text":"","title":"SpiderConfig"},{"location":"spider/user_info_spider_2/UrlRequest/","text":"UrlRequest","title":"UrlRequest"},{"location":"spider/user_info_spider_2/UrlRequest/#urlrequest","text":"","title":"UrlRequest"},{"location":"spider/work_order_spider/LoginSpider/","text":"LoginSpider","title":"LoginSpider"},{"location":"spider/work_order_spider/LoginSpider/#loginspider","text":"","title":"LoginSpider"},{"location":"spider/work_order_spider/WorkOrderExcelDown/","text":"WorkOrderExcelDown","title":"WorkOrderExcelDown"},{"location":"spider/work_order_spider/WorkOrderExcelDown/#workorderexceldown","text":"","title":"WorkOrderExcelDown"},{"location":"spider/work_order_spider/work_order_conf/","text":"work_order_conf","title":"work_order_conf"},{"location":"spider/work_order_spider/work_order_conf/#work_order_conf","text":"","title":"work_order_conf"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/CoordTransFormat/","text":"\u6982\u8ff0 \u7528\u4e8e\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u53d6\u8f66\u4e0e\u8fd8\u8f66\u5206\u65f6\u8ba2\u5355\u4fe1\u606f\uff0c\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6 \u4e3b\u8981\u4e1a\u52a1\u6d41\u7a0b\uff1a \u6570\u636e\u5e93\u67e5\u8be2\u5206\u65f6\u8ba2\u5355\u53d6\u8f66/\u8fd8\u8f66\uff1b \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\u7ecf\u7eac\u5ea6\u5750\u6807\u8f6c\u6362\uff0c\u53ca\u8f66\u8f86\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185\u7684\u5224\u65ad\uff1b \u8fd4\u56de\u8f66\u8f86\u4f4d\u7f6e\u4efb\u52a1\u5206\u533a\u4fe1\u606f\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6\u3002 \u5176\u4e2d\u6587\u4ef6\u7ed3\u6784\uff1a config\uff1a\u914d\u7f6e\u6587\u4ef6\uff0c\u6570\u636e\u5e93\u7b49\u76f8\u5173\u4fe1\u606f\uff1b CoordTransFormat: \u5750\u6807\u7cfb\u8f6c\u5316\u5de5\u5177\u7c7b DataBaseHandle: \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b isPointInPolygon: \u7535\u5b50\u56f4\u680f\u5224\u65ad\u5de5\u5177\u51fd\u6570","title":"\u6982\u8ff0"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/CoordTransFormat/#_1","text":"\u7528\u4e8e\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u53d6\u8f66\u4e0e\u8fd8\u8f66\u5206\u65f6\u8ba2\u5355\u4fe1\u606f\uff0c\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6 \u4e3b\u8981\u4e1a\u52a1\u6d41\u7a0b\uff1a \u6570\u636e\u5e93\u67e5\u8be2\u5206\u65f6\u8ba2\u5355\u53d6\u8f66/\u8fd8\u8f66\uff1b \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\u7ecf\u7eac\u5ea6\u5750\u6807\u8f6c\u6362\uff0c\u53ca\u8f66\u8f86\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185\u7684\u5224\u65ad\uff1b \u8fd4\u56de\u8f66\u8f86\u4f4d\u7f6e\u4efb\u52a1\u5206\u533a\u4fe1\u606f\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6\u3002 \u5176\u4e2d\u6587\u4ef6\u7ed3\u6784\uff1a config\uff1a\u914d\u7f6e\u6587\u4ef6\uff0c\u6570\u636e\u5e93\u7b49\u76f8\u5173\u4fe1\u606f\uff1b CoordTransFormat: \u5750\u6807\u7cfb\u8f6c\u5316\u5de5\u5177\u7c7b DataBaseHandle: \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b isPointInPolygon: \u7535\u5b50\u56f4\u680f\u5224\u65ad\u5de5\u5177\u51fd\u6570","title":"\u6982\u8ff0"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/","text":"DataBaseHandle DataBaseHandle \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 Source code in tools/DataBaseHandle.py class DataBaseHandle ( object ): \"\"\" \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 \"\"\" # \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () # \u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows # rows\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93 def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u5220\u9664\u6570\u636e\u5e93\u6570\u636e def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u67e5\u8be2\u6570\u636e def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data __init__ ( self , hostname , port , user , password , db ) special \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 Source code in tools/DataBaseHandle.py def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () delete_mysql_data ( self , delete_SQL ) \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) insert_mysql_data ( self , table_name , data , data_type , insert_type = 'replace' ) \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) null_value_replace ( data , data_type ) staticmethod \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 Source code in tools/DataBaseHandle.py @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows select_mysql_data ( self , select_sql ) \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c Source code in tools/DataBaseHandle.py def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"DataBaseHandle"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#databasehandle","text":"","title":"DataBaseHandle"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle","text":"\u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 Source code in tools/DataBaseHandle.py class DataBaseHandle ( object ): \"\"\" \u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\u5c01\u88c5 \"\"\" # \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor () # \u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows # rows\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93 def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u5220\u9664\u6570\u636e\u5e93\u6570\u636e def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" ) # \u67e5\u8be2\u6570\u636e def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"DataBaseHandle"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.__init__","text":"\u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 Source code in tools/DataBaseHandle.py def __init__ ( self , hostname , port , user , password , db ): \"\"\" \u521d\u59cb\u5316\u8fde\u63a5\u6570\u636e\u5e93 \"\"\" self . conn = pymysql . connect ( host = hostname , port = port , user = user , password = password , db = db , charset = 'utf8' ) self . cur = self . conn . cursor ()","title":"__init__()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.delete_mysql_data","text":"\u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def delete_mysql_data ( self , delete_SQL ): \"\"\" \u5220\u9664\u6570\u636e\u5e93\u6570\u636e\u64cd\u4f5c \"\"\" try : self . cur . execute ( delete_SQL ) # \u50cfsql\u8bed\u53e5\u4f20\u9012\u53c2\u6570 self . conn . commit () logger . info ( delete_SQL + \" \u6570\u636e\u5220\u9664\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () logger . info ( delete_SQL + \" \u5220\u9664\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" )","title":"delete_mysql_data()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.insert_mysql_data","text":"\u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c Source code in tools/DataBaseHandle.py def insert_mysql_data ( self , table_name , data , data_type , insert_type = \"replace\" ): \"\"\" \u6570\u636e\u5e93\u63d2\u5165\u6570\u636e\u64cd\u4f5c \"\"\" col_names_list = [] col_dataframe_list = [] for type in data_type : col_names_list . append ( type [ 0 ]) col_dataframe_list . append ( type [ 2 ]) col_names_str = \",\" . join ( col_names_list ) col_str = \",\" . join ([ \" %s \" for i in col_names_list ]) insert_SQL = insert_type + \" into \" + table_name + \" ( \" + col_names_str + \") VALUES (\" + col_str + \");\" data = data [ col_dataframe_list ] rows = self . null_value_replace ( data , data_type ) try : self . cur . executemany ( insert_SQL , rows ) self . conn . commit () # \u6267\u884cSQL\u8bed\u53e5\u540e\uff0c\u4f7f\u6570\u636e\u5e93\u66f4\u6539\u751f\u6548 logger . info ( table_name + \" \u6570\u636e\u63d2\u5165\u6210\u529f\uff01\" ) except Exception as e : logger . error ( 'Reason: %s ' % e ) self . conn . rollback () # \u56de\u6eda\uff0c\u4f7f\u6267\u884c\u51fa\u9519\u7684\u547d\u4ee4\uff0c\u4e0d\u6539\u53d8\u6570\u636e\u5e93 logger . info ( table_name + \" \u63d2\u5165\u6570\u636e\u5931\u8d25\uff0c\u6267\u884c\u4e86\u56de\u6eda\" )","title":"insert_mysql_data()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.null_value_replace","text":"\u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 Source code in tools/DataBaseHandle.py @staticmethod def null_value_replace ( data , data_type ): \"\"\" \u7a7a\u503c\u5904\u7406\uff0c\u5b58\u50a8\u5230\u6570\u636e\u5e93\u524d\u7684\u9884\u5904\u7406\uff0c\u7f3a\u5931\u503cNaN,NaT\u66ff\u6362\u4e3aNone \u63d2\u5165\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6b65\u9aa4 \"\"\" df = data . reset_index ( drop = True ) row = df . shape [ 0 ] dit1 = {} try : for tup in data_type : dit1 [ tup [ 0 ]] = df [ tup [ 2 ]] . astype ( tup [ 1 ]) . mask ( df [ tup [ 2 ]] . isnull (), None ) except Exception as e : logger . error ( e ) raise Exception ( '' ) rows = [] for i in range ( row ): oneRow = [] for tup1 in data_type : oneRow . append ( dit1 [ tup1 [ 0 ]][ i ]) rows . append ( tuple ( oneRow )) return rows","title":"null_value_replace()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/DataBaseHandle/#lat_lng.tools.DataBaseHandle.DataBaseHandle.select_mysql_data","text":"\u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c Source code in tools/DataBaseHandle.py def select_mysql_data ( self , select_sql ): \"\"\" \u67e5\u8be2\u6570\u636e\u5e93\u64cd\u4f5c \"\"\" data = pd . read_sql ( select_sql , self . conn ) if data . empty : logger . error ( ' %s \u672a\u83b7\u53d6\u5230\u6570\u636e' % select_sql ) return data","title":"select_mysql_data()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/","text":"GetCarArea_copy GetCarArea \u5177\u4f53\u4e1a\u52a1\u6d41\u7a0b\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u53d6\u8f66\u4e0e\u8fd8\u8f66\u5206\u65f6\u8ba2\u5355\u4fe1\u606f\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6 Source code in tools/GetCarArea_copy.py class GetCarArea ( object ): \"\"\" \u5177\u4f53\u4e1a\u52a1\u6d41\u7a0b\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u53d6\u8f66\u4e0e\u8fd8\u8f66\u5206\u65f6\u8ba2\u5355\u4fe1\u606f\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6 \"\"\" def __init__ ( self ): \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\"\"\" self . db = DataBaseHandle ( hostname = host , port = port , user = user , password = password , db = db ) def get_area ( self , area_sql , car_sql , is_translate = True ): \"\"\" \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f \"\"\" car_point = self . db . select_mysql_data ( car_sql ) if is_translate : car_point = self . get_car_point ( car_point ) else : car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u83b7\u53d6\u8f66\u8f86\u4f4d\u7f6e\u4efb\u52a1\u5206\u533a task_area = self . _get_place_judge ( car_point , self . get_ring_collection ( area_sql ))[[ '\u8f66\u724c\u53f7' , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ]] logger . info ( '\u5df2\u83b7\u53d6\u5230\u8f66\u8f86\u5206\u533a\u4fe1\u606f' ) return task_area @staticmethod def get_car_point ( car_point ): \"\"\" \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6\uff0c\u5e76\u8fdb\u884c\u5750\u6807\u7ea0\u504f \"\"\" # \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6 car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u7ecf\u7eac\u5ea6\u7ea0\u504f a = Coord ( data = car_point ) correct_value = a . wgs84_to_gcj02 () car_point = dict ( zip ( list ( car_point . keys ()), correct_value )) return car_point @staticmethod def _get_place_judge ( car_position , ring_collection ): \"\"\"\u5224\u65ad\u8f66\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185\"\"\" columns = [ '\u8f66\u724c\u53f7' , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] result = pd . DataFrame ( data = { '\u8f66\u724c\u53f7' : list ( car_position . keys ())}, columns = columns ) result = result . set_index ( '\u8f66\u724c\u53f7' ) for car_key in car_position : for item in ring_collection : is_in = is_point_in_polygon ( car_position [ car_key ], item [ 'ring' ]) if is_in : result . loc [ car_key , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] = item [ 'name' ] break result . reset_index ( inplace = True ) return result def get_ring_collection ( self , sql ): \"\"\" \u83b7\u53d6\u7535\u5b50\u56f4\u680f\u96c6\u5408 \"\"\" ring_collection = [] df = self . db . select_mysql_data ( sql ) # \u628a\u7535\u5b50\u56f4\u680f\u7ecf\u7eac\u5ea6\u8f6c\u4e3a\u6d6e\u70b9\u578b\u6570\u503c df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ]) df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ]) # \u83b7\u53d6\u533a\u57df\u540d\u5217\u8868 name_list = df . \u7535\u5b50\u56f4\u680f\u540d\u79f0 . unique () # \u7ec4\u88c5\u6210ring_collection for name in name_list : data = {} data [ 'name' ] = name data [ 'ring' ] = df . iloc [:, 1 :][ df [ '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] == name ] . values . tolist () ring_collection . append ( data ) return ring_collection __init__ ( self ) special \u521d\u59cb\u5316\u6570\u636e\u5e93 Source code in tools/GetCarArea_copy.py def __init__ ( self ): \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\"\"\" self . db = DataBaseHandle ( hostname = host , port = port , user = user , password = password , db = db ) get_area ( self , area_sql , car_sql , is_translate = True ) \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f Source code in tools/GetCarArea_copy.py def get_area ( self , area_sql , car_sql , is_translate = True ): \"\"\" \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f \"\"\" car_point = self . db . select_mysql_data ( car_sql ) if is_translate : car_point = self . get_car_point ( car_point ) else : car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u83b7\u53d6\u8f66\u8f86\u4f4d\u7f6e\u4efb\u52a1\u5206\u533a task_area = self . _get_place_judge ( car_point , self . get_ring_collection ( area_sql ))[[ '\u8f66\u724c\u53f7' , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ]] logger . info ( '\u5df2\u83b7\u53d6\u5230\u8f66\u8f86\u5206\u533a\u4fe1\u606f' ) return task_area get_car_point ( car_point ) staticmethod \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6\uff0c\u5e76\u8fdb\u884c\u5750\u6807\u7ea0\u504f Source code in tools/GetCarArea_copy.py @staticmethod def get_car_point ( car_point ): \"\"\" \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6\uff0c\u5e76\u8fdb\u884c\u5750\u6807\u7ea0\u504f \"\"\" # \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6 car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u7ecf\u7eac\u5ea6\u7ea0\u504f a = Coord ( data = car_point ) correct_value = a . wgs84_to_gcj02 () car_point = dict ( zip ( list ( car_point . keys ()), correct_value )) return car_point get_ring_collection ( self , sql ) \u83b7\u53d6\u7535\u5b50\u56f4\u680f\u96c6\u5408 Source code in tools/GetCarArea_copy.py def get_ring_collection ( self , sql ): \"\"\" \u83b7\u53d6\u7535\u5b50\u56f4\u680f\u96c6\u5408 \"\"\" ring_collection = [] df = self . db . select_mysql_data ( sql ) # \u628a\u7535\u5b50\u56f4\u680f\u7ecf\u7eac\u5ea6\u8f6c\u4e3a\u6d6e\u70b9\u578b\u6570\u503c df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ]) df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ]) # \u83b7\u53d6\u533a\u57df\u540d\u5217\u8868 name_list = df . \u7535\u5b50\u56f4\u680f\u540d\u79f0 . unique () # \u7ec4\u88c5\u6210ring_collection for name in name_list : data = {} data [ 'name' ] = name data [ 'ring' ] = df . iloc [:, 1 :][ df [ '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] == name ] . values . tolist () ring_collection . append ( data ) return ring_collection","title":"GetCarArea_copy"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/#getcararea_copy","text":"","title":"GetCarArea_copy"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/#lat_lng.tools.GetCarArea_copy.GetCarArea","text":"\u5177\u4f53\u4e1a\u52a1\u6d41\u7a0b\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u53d6\u8f66\u4e0e\u8fd8\u8f66\u5206\u65f6\u8ba2\u5355\u4fe1\u606f\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6 Source code in tools/GetCarArea_copy.py class GetCarArea ( object ): \"\"\" \u5177\u4f53\u4e1a\u52a1\u6d41\u7a0b\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u53d6\u8f66\u4e0e\u8fd8\u8f66\u5206\u65f6\u8ba2\u5355\u4fe1\u606f\u5e76\u5bfc\u51fa\u4e3aexcel\u6587\u4ef6 \"\"\" def __init__ ( self ): \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\"\"\" self . db = DataBaseHandle ( hostname = host , port = port , user = user , password = password , db = db ) def get_area ( self , area_sql , car_sql , is_translate = True ): \"\"\" \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f \"\"\" car_point = self . db . select_mysql_data ( car_sql ) if is_translate : car_point = self . get_car_point ( car_point ) else : car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u83b7\u53d6\u8f66\u8f86\u4f4d\u7f6e\u4efb\u52a1\u5206\u533a task_area = self . _get_place_judge ( car_point , self . get_ring_collection ( area_sql ))[[ '\u8f66\u724c\u53f7' , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ]] logger . info ( '\u5df2\u83b7\u53d6\u5230\u8f66\u8f86\u5206\u533a\u4fe1\u606f' ) return task_area @staticmethod def get_car_point ( car_point ): \"\"\" \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6\uff0c\u5e76\u8fdb\u884c\u5750\u6807\u7ea0\u504f \"\"\" # \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6 car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u7ecf\u7eac\u5ea6\u7ea0\u504f a = Coord ( data = car_point ) correct_value = a . wgs84_to_gcj02 () car_point = dict ( zip ( list ( car_point . keys ()), correct_value )) return car_point @staticmethod def _get_place_judge ( car_position , ring_collection ): \"\"\"\u5224\u65ad\u8f66\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185\"\"\" columns = [ '\u8f66\u724c\u53f7' , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] result = pd . DataFrame ( data = { '\u8f66\u724c\u53f7' : list ( car_position . keys ())}, columns = columns ) result = result . set_index ( '\u8f66\u724c\u53f7' ) for car_key in car_position : for item in ring_collection : is_in = is_point_in_polygon ( car_position [ car_key ], item [ 'ring' ]) if is_in : result . loc [ car_key , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] = item [ 'name' ] break result . reset_index ( inplace = True ) return result def get_ring_collection ( self , sql ): \"\"\" \u83b7\u53d6\u7535\u5b50\u56f4\u680f\u96c6\u5408 \"\"\" ring_collection = [] df = self . db . select_mysql_data ( sql ) # \u628a\u7535\u5b50\u56f4\u680f\u7ecf\u7eac\u5ea6\u8f6c\u4e3a\u6d6e\u70b9\u578b\u6570\u503c df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ]) df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ]) # \u83b7\u53d6\u533a\u57df\u540d\u5217\u8868 name_list = df . \u7535\u5b50\u56f4\u680f\u540d\u79f0 . unique () # \u7ec4\u88c5\u6210ring_collection for name in name_list : data = {} data [ 'name' ] = name data [ 'ring' ] = df . iloc [:, 1 :][ df [ '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] == name ] . values . tolist () ring_collection . append ( data ) return ring_collection","title":"GetCarArea"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/#lat_lng.tools.GetCarArea_copy.GetCarArea.__init__","text":"\u521d\u59cb\u5316\u6570\u636e\u5e93 Source code in tools/GetCarArea_copy.py def __init__ ( self ): \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\"\"\" self . db = DataBaseHandle ( hostname = host , port = port , user = user , password = password , db = db )","title":"__init__()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/#lat_lng.tools.GetCarArea_copy.GetCarArea.get_area","text":"\u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f Source code in tools/GetCarArea_copy.py def get_area ( self , area_sql , car_sql , is_translate = True ): \"\"\" \u83b7\u53d6\u8f66\u8f86\u5206\u533a\u4fe1\u606f \"\"\" car_point = self . db . select_mysql_data ( car_sql ) if is_translate : car_point = self . get_car_point ( car_point ) else : car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u83b7\u53d6\u8f66\u8f86\u4f4d\u7f6e\u4efb\u52a1\u5206\u533a task_area = self . _get_place_judge ( car_point , self . get_ring_collection ( area_sql ))[[ '\u8f66\u724c\u53f7' , '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ]] logger . info ( '\u5df2\u83b7\u53d6\u5230\u8f66\u8f86\u5206\u533a\u4fe1\u606f' ) return task_area","title":"get_area()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/#lat_lng.tools.GetCarArea_copy.GetCarArea.get_car_point","text":"\u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6\uff0c\u5e76\u8fdb\u884c\u5750\u6807\u7ea0\u504f Source code in tools/GetCarArea_copy.py @staticmethod def get_car_point ( car_point ): \"\"\" \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6\uff0c\u5e76\u8fdb\u884c\u5750\u6807\u7ea0\u504f \"\"\" # \u83b7\u53d6\u8f66\u7684\u7ecf\u7eac\u5ea6 car_point = car_point . set_index ( '\u8f66\u724c\u53f7' ) . T . to_dict ( 'list' ) # \u7ecf\u7eac\u5ea6\u7ea0\u504f a = Coord ( data = car_point ) correct_value = a . wgs84_to_gcj02 () car_point = dict ( zip ( list ( car_point . keys ()), correct_value )) return car_point","title":"get_car_point()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/GetCarArea_copy/#lat_lng.tools.GetCarArea_copy.GetCarArea.get_ring_collection","text":"\u83b7\u53d6\u7535\u5b50\u56f4\u680f\u96c6\u5408 Source code in tools/GetCarArea_copy.py def get_ring_collection ( self , sql ): \"\"\" \u83b7\u53d6\u7535\u5b50\u56f4\u680f\u96c6\u5408 \"\"\" ring_collection = [] df = self . db . select_mysql_data ( sql ) # \u628a\u7535\u5b50\u56f4\u680f\u7ecf\u7eac\u5ea6\u8f6c\u4e3a\u6d6e\u70b9\u578b\u6570\u503c df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7ecf\u5ea6' ]) df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ] = pd . to_numeric ( df [ '\u7535\u5b50\u56f4\u680f\u5708\u7eac\u5ea6' ]) # \u83b7\u53d6\u533a\u57df\u540d\u5217\u8868 name_list = df . \u7535\u5b50\u56f4\u680f\u540d\u79f0 . unique () # \u7ec4\u88c5\u6210ring_collection for name in name_list : data = {} data [ 'name' ] = name data [ 'ring' ] = df . iloc [:, 1 :][ df [ '\u7535\u5b50\u56f4\u680f\u540d\u79f0' ] == name ] . values . tolist () ring_collection . append ( data ) return ring_collection","title":"get_ring_collection()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/","text":"config Car_Maintain \u8f66\u8f86\u4fdd\u517b\u76ee\u5f55\u5730\u5740 DISPATCH_TASK_BASE_PATH \u62a5\u8868\u5b58\u50a8\u6587\u4ef6\u5939 Geo_Fence_BASE_PATH \u76ee\u5f55\u5730\u5740 Geo_Fence_NAME \u540e\u53f0\u767b\u9646\u4fe1\u606f\u7528\u6237\u540d Geo_Fence_PASSWORD \u540e\u53f0\u767b\u9646\u4fe1\u606f\u5bc6\u7801 Official_Car_Order_BASE_PATH OfficialCarOrderSpider\u722c\u866b\u8def\u5f84 PLAN_TASK_FILE_NAME \u9884\u8ba1\u4efb\u52a1\u8868\u6587\u4ef6\u540d Tbox_Offline \u8f66\u8f86T-Box\u79bb\u7ebf\u76ee\u5f55\u5730\u5740 area_counts_email_list \u533a\u57df\u7edf\u8ba1\u4eba\u5458\u90ae\u7bb1\u5217\u8868 background_account_pool \u540e\u53f0\u8d26\u53f7\u6c60 base_info_url \u83b7\u53d6\u8be6\u60c5\u7684url car_wash_company_monitor_email_list \u7b2c\u4e09\u65b9\u6e05\u6d01\u5f02\u5e38 chengdu_daily_email_list \u6210\u90fd\u91cd\u70b9\u6307\u6807\u76d1\u63a7\u4eba\u5458\u90ae\u7bb1\u5217\u8868 cold_car_base_day \u51b7\u95e8\u79fb\u8f66\u95f4\u9694\u5929\u6570 cold_car_threshold_day \u51b7\u95e8\u79fb\u8f66\u9608\u503c\u5929\u6570 day_number \u95e8\u5e97\u767d\u5929\u6d17\u8f66\u6570\u91cf db \u6570\u636e\u5e93\u540d\u79f0 dispatch_person_email_list \u8c03\u5ea6\u4eba\u5458\u90ae\u7bb1\u5217\u8868 electricity_car_min_remaining_mileage \u7535\u8f66\u6700\u4f4e\u7eed\u822a\u91cc\u7a0b get_id_url \u83b7\u53d6id\u7684url get_maintain_url \u83b7\u53d6maintain\u7684url get_tboxoffline_url \u83b7\u53d6tboxoffline\u7684url goal_email_list \u6210\u90fd\u5171\u4eab\u5b63\u76ee\u6807\u90ae\u7bb1\u5217\u8868 host \u4e3b\u673a\u5730\u5740 limit_car_time \u9650\u884c\u4efb\u52a1\u6807\u8bb0\u6709\u6548\u65f6\u95f4 low_battery_voltage_threshold \u84c4\u7535\u6c60\u4f4e\u7535\u538b\u9608\u503c\uff08\u4f0f/V\uff09 morning_time \u767d\u5929\u65f6\u95f4\u8282\u70b9 national_holiday 2020\u5e74\u56fd\u5bb6\u6cd5\u5b9a\u5047\u65e5 night_number \u95e8\u5e97\u591c\u665a\u6d17\u8f66\u6570\u91cf night_time \u591c\u665a\u65f6\u95f4\u8282\u70b9 oil_car_min_remaining_mileage \u6cb9\u8f66\u6700\u4f4e\u7eed\u822a\u91cc\u7a0b password \u5bc6\u7801 pg_db pg \u6570\u636e\u5e93\u540d\u79f0 pg_host pg \u4e3b\u673a\u5730\u5740 pg_password pg \u6570\u636e\u5e93\u5bc6\u7801 pg_port pg \u7aef\u53e3\u53f7 pg_user pg \u6570\u636e\u5e93\u7528\u6237\u540d port \u7aef\u53e3\u53f7 toll_car_base_day \u6536\u8d39\u79fb\u8f66\u95f4\u9694\u5929\u6570 toll_car_threshold_day \u6536\u8d39\u79fb\u8f66\u9608\u503c\u5929\u6570 user \u7528\u6237\u540d wash_car_base_day \u6d17\u8f66\u95f4\u9694\u5929\u6570 wash_car_company_threshold_day \u6d17\u8f66\u516c\u53f8\u4efb\u52a1\u9608\u503c wash_car_threshold_day \u6d17\u8f66\u9608\u503c\u5929\u6570 watch_car_base_day \u89c1\u8f66\u95f4\u9694\u5929\u6570 watch_car_threshold_day \u89c1\u8f66\u9608\u503c\u5929\u6570 yiqi_email_list \u4e00\u6c7d\u90ae\u7bb1\u5217\u8868","title":"config"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#config","text":"","title":"config"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.Car_Maintain","text":"\u8f66\u8f86\u4fdd\u517b\u76ee\u5f55\u5730\u5740","title":"Car_Maintain"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.DISPATCH_TASK_BASE_PATH","text":"\u62a5\u8868\u5b58\u50a8\u6587\u4ef6\u5939","title":"DISPATCH_TASK_BASE_PATH"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.Geo_Fence_BASE_PATH","text":"\u76ee\u5f55\u5730\u5740","title":"Geo_Fence_BASE_PATH"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.Geo_Fence_NAME","text":"\u540e\u53f0\u767b\u9646\u4fe1\u606f\u7528\u6237\u540d","title":"Geo_Fence_NAME"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.Geo_Fence_PASSWORD","text":"\u540e\u53f0\u767b\u9646\u4fe1\u606f\u5bc6\u7801","title":"Geo_Fence_PASSWORD"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.Official_Car_Order_BASE_PATH","text":"OfficialCarOrderSpider\u722c\u866b\u8def\u5f84","title":"Official_Car_Order_BASE_PATH"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.PLAN_TASK_FILE_NAME","text":"\u9884\u8ba1\u4efb\u52a1\u8868\u6587\u4ef6\u540d","title":"PLAN_TASK_FILE_NAME"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.Tbox_Offline","text":"\u8f66\u8f86T-Box\u79bb\u7ebf\u76ee\u5f55\u5730\u5740","title":"Tbox_Offline"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.area_counts_email_list","text":"\u533a\u57df\u7edf\u8ba1\u4eba\u5458\u90ae\u7bb1\u5217\u8868","title":"area_counts_email_list"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.background_account_pool","text":"\u540e\u53f0\u8d26\u53f7\u6c60","title":"background_account_pool"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.base_info_url","text":"\u83b7\u53d6\u8be6\u60c5\u7684url","title":"base_info_url"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.car_wash_company_monitor_email_list","text":"\u7b2c\u4e09\u65b9\u6e05\u6d01\u5f02\u5e38","title":"car_wash_company_monitor_email_list"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.chengdu_daily_email_list","text":"\u6210\u90fd\u91cd\u70b9\u6307\u6807\u76d1\u63a7\u4eba\u5458\u90ae\u7bb1\u5217\u8868","title":"chengdu_daily_email_list"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.cold_car_base_day","text":"\u51b7\u95e8\u79fb\u8f66\u95f4\u9694\u5929\u6570","title":"cold_car_base_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.cold_car_threshold_day","text":"\u51b7\u95e8\u79fb\u8f66\u9608\u503c\u5929\u6570","title":"cold_car_threshold_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.day_number","text":"\u95e8\u5e97\u767d\u5929\u6d17\u8f66\u6570\u91cf","title":"day_number"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.db","text":"\u6570\u636e\u5e93\u540d\u79f0","title":"db"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.dispatch_person_email_list","text":"\u8c03\u5ea6\u4eba\u5458\u90ae\u7bb1\u5217\u8868","title":"dispatch_person_email_list"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.electricity_car_min_remaining_mileage","text":"\u7535\u8f66\u6700\u4f4e\u7eed\u822a\u91cc\u7a0b","title":"electricity_car_min_remaining_mileage"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.get_id_url","text":"\u83b7\u53d6id\u7684url","title":"get_id_url"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.get_maintain_url","text":"\u83b7\u53d6maintain\u7684url","title":"get_maintain_url"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.get_tboxoffline_url","text":"\u83b7\u53d6tboxoffline\u7684url","title":"get_tboxoffline_url"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.goal_email_list","text":"\u6210\u90fd\u5171\u4eab\u5b63\u76ee\u6807\u90ae\u7bb1\u5217\u8868","title":"goal_email_list"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.host","text":"\u4e3b\u673a\u5730\u5740","title":"host"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.limit_car_time","text":"\u9650\u884c\u4efb\u52a1\u6807\u8bb0\u6709\u6548\u65f6\u95f4","title":"limit_car_time"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.low_battery_voltage_threshold","text":"\u84c4\u7535\u6c60\u4f4e\u7535\u538b\u9608\u503c\uff08\u4f0f/V\uff09","title":"low_battery_voltage_threshold"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.morning_time","text":"\u767d\u5929\u65f6\u95f4\u8282\u70b9","title":"morning_time"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.national_holiday","text":"2020\u5e74\u56fd\u5bb6\u6cd5\u5b9a\u5047\u65e5","title":"national_holiday"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.night_number","text":"\u95e8\u5e97\u591c\u665a\u6d17\u8f66\u6570\u91cf","title":"night_number"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.night_time","text":"\u591c\u665a\u65f6\u95f4\u8282\u70b9","title":"night_time"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.oil_car_min_remaining_mileage","text":"\u6cb9\u8f66\u6700\u4f4e\u7eed\u822a\u91cc\u7a0b","title":"oil_car_min_remaining_mileage"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.password","text":"\u5bc6\u7801","title":"password"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.pg_db","text":"pg \u6570\u636e\u5e93\u540d\u79f0","title":"pg_db"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.pg_host","text":"pg \u4e3b\u673a\u5730\u5740","title":"pg_host"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.pg_password","text":"pg \u6570\u636e\u5e93\u5bc6\u7801","title":"pg_password"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.pg_port","text":"pg \u7aef\u53e3\u53f7","title":"pg_port"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.pg_user","text":"pg \u6570\u636e\u5e93\u7528\u6237\u540d","title":"pg_user"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.port","text":"\u7aef\u53e3\u53f7","title":"port"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.toll_car_base_day","text":"\u6536\u8d39\u79fb\u8f66\u95f4\u9694\u5929\u6570","title":"toll_car_base_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.toll_car_threshold_day","text":"\u6536\u8d39\u79fb\u8f66\u9608\u503c\u5929\u6570","title":"toll_car_threshold_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.user","text":"\u7528\u6237\u540d","title":"user"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.wash_car_base_day","text":"\u6d17\u8f66\u95f4\u9694\u5929\u6570","title":"wash_car_base_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.wash_car_company_threshold_day","text":"\u6d17\u8f66\u516c\u53f8\u4efb\u52a1\u9608\u503c","title":"wash_car_company_threshold_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.wash_car_threshold_day","text":"\u6d17\u8f66\u9608\u503c\u5929\u6570","title":"wash_car_threshold_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.watch_car_base_day","text":"\u89c1\u8f66\u95f4\u9694\u5929\u6570","title":"watch_car_base_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.watch_car_threshold_day","text":"\u89c1\u8f66\u9608\u503c\u5929\u6570","title":"watch_car_threshold_day"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/config/#lat_lng.tools.config.yiqi_email_list","text":"\u4e00\u6c7d\u90ae\u7bb1\u5217\u8868","title":"yiqi_email_list"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/isPointInPolygon/","text":"isPointInPolygon is_point_in_polygon ( car_point , ring_polygon ) \u5de5\u5177\u51fd\u6570\u5c01\u88c5\uff0c\u5224\u65ad\u8f66\u8f86\u4f4d\u7f6e\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185 Source code in tools/isPointInPolygon.py def is_point_in_polygon ( car_point , ring_polygon ): \"\"\"\u5de5\u5177\u51fd\u6570\u5c01\u88c5\uff0c\u5224\u65ad\u8f66\u8f86\u4f4d\u7f6e\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185\"\"\" a = car_point [ 0 ] b = car_point [ 1 ] if ~ ( isinstance ( a , float ) and isinstance ( b , float )): a = float ( a ) b = float ( b ) point = Point ( a , b ) polygon = Polygon ( ring_polygon ) result = polygon . contains ( point ) return result","title":"isPointInPolygon"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/isPointInPolygon/#ispointinpolygon","text":"","title":"isPointInPolygon"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/isPointInPolygon/#lat_lng.tools.isPointInPolygon.is_point_in_polygon","text":"\u5de5\u5177\u51fd\u6570\u5c01\u88c5\uff0c\u5224\u65ad\u8f66\u8f86\u4f4d\u7f6e\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185 Source code in tools/isPointInPolygon.py def is_point_in_polygon ( car_point , ring_polygon ): \"\"\"\u5de5\u5177\u51fd\u6570\u5c01\u88c5\uff0c\u5224\u65ad\u8f66\u8f86\u4f4d\u7f6e\u662f\u5426\u5728\u7535\u5b50\u56f4\u680f\u5185\"\"\" a = car_point [ 0 ] b = car_point [ 1 ] if ~ ( isinstance ( a , float ) and isinstance ( b , float )): a = float ( a ) b = float ( b ) point = Point ( a , b ) polygon = Polygon ( ring_polygon ) result = polygon . contains ( point ) return result","title":"is_point_in_polygon()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/","text":"CoordTransFormat \u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c Coord ( CoordClass ) CoordClass\u7684\u5b50\u7c7b\uff0c\u5b9e\u73b0\u4e86\u7236\u7c7b\u7684get_data\u65b9\u6cd5 Source code in tools/CoordTransFormat.py class Coord ( CoordClass ): \"\"\" CoordClass\u7684\u5b50\u7c7b\uff0c\u5b9e\u73b0\u4e86\u7236\u7c7b\u7684get_data\u65b9\u6cd5 \"\"\" def get_data ( self , data ): \"\"\" \u5224\u65addata\u662f\u5b57\u5178\u6216\u6570\u7ec4\uff0c\u7edf\u4e00\u8f6c\u5316\u6210\u6570\u7ec4\u8fdb\u884c\u8f93\u51fa \"\"\" if isinstance ( data , dict ): self . data = list ( data . values ()) elif isinstance ( data , list ): self . data = data get_data ( self , data ) \u5224\u65addata\u662f\u5b57\u5178\u6216\u6570\u7ec4\uff0c\u7edf\u4e00\u8f6c\u5316\u6210\u6570\u7ec4\u8fdb\u884c\u8f93\u51fa Source code in tools/CoordTransFormat.py def get_data ( self , data ): \"\"\" \u5224\u65addata\u662f\u5b57\u5178\u6216\u6570\u7ec4\uff0c\u7edf\u4e00\u8f6c\u5316\u6210\u6570\u7ec4\u8fdb\u884c\u8f93\u51fa \"\"\" if isinstance ( data , dict ): self . data = list ( data . values ()) elif isinstance ( data , list ): self . data = data CoordClass Source code in tools/CoordTransFormat.py class CoordClass ( object ): def __init__ ( self , ** kwargs ): \"\"\" 111\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c \"\"\" self . x_pi = 3.14159265358979324 * 3000.0 / 180.0 self . pi = 3.1415926535897932384626 self . a = 6378245.0 # \u957f\u534a\u8f74 self . ee = 0.00669342162296594323 # \u6241\u7387 self . data = list () self . get_data ( ** kwargs ) self . check_data () @abstractmethod def get_data ( self , * args , ** kwargs ): \"\"\" \u83b7\u53d6\u6570\u636e\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u91cd\u5199 \"\"\" pass def check_data ( self ): \"\"\" \u6821\u9a8c\u6570\u636e\uff0c\u5177\u4f53\u6821\u9a8c\u6570\u636edata\u5e08\u8303\u4e3a\u7a7a\u4e14\u662f\u5426\u4e3alist\u683c\u5f0f\u6570\u636e \"\"\" if not self . data : raise Exception ( '\u8bf7\u91cd\u5199get_data\u65b9\u6cd5\u5e76\u8fd4\u56de\u6570\u636e\u5217\u8868' ) if not isinstance ( self . data , list ): raise Exception ( 'get_data\u65b9\u6cd5\u8bf7\u8fd4\u56delist\u683c\u5f0f\u6570\u636e' ) def wgs84_to_gcj02 ( self ): \"\"\" wgs84\u5750\u6807\u7cfb\u8f6cgcj02 \"\"\" result = [] for i in self . data : result . append ( self . _wgs84_to_gcj02 ( i [ 0 ], i [ 1 ])) return result def _wgs84_to_gcj02 ( self , lng , lat ): \"\"\" \u79c1\u6709\u65b9\u6cd5\uff0c\u5750\u6807\u8f6c\u6362\u7684\u5177\u4f53\u7b97\u6cd5\uff0c\u5177\u4f53\u6d41\u7a0b\u5224\u65ad\u5f53\u524d\u5750\u6807\u662f\u5426\u5728\u56fd\u5185\uff0c\u5982\u679c\u975e\u56fd\u5185\uff0c\u8fd4\u56de\u5750\u6807\uff0c\u5982\u679c\u662f\u56fd\u5185\u5750\u6807\uff0c\u5219\u8fdb\u884c\u5750\u6807\u7cfb\u8f6c\u6362 \"\"\" lng , lat = float ( lng ), float ( lat ) if self . out_of_china ( lng , lat ): # \u5224\u65ad\u662f\u5426\u5728\u56fd\u5185 return lng , lat dlat = self . transform_lat ( lng - 105.0 , lat - 35.0 ) dlng = self . transform_lng ( lng - 105.0 , lat - 35.0 ) radlat = lat / 180.0 * self . pi magic = math . sin ( radlat ) magic = 1 - self . ee * magic * magic sqrtmagic = math . sqrt ( magic ) dlat = ( dlat * 180.0 ) / (( self . a * ( 1 - self . ee )) / ( magic * sqrtmagic ) * self . pi ) dlng = ( dlng * 180.0 ) / ( self . a / sqrtmagic * math . cos ( radlat ) * self . pi ) mglat = lat + dlat mglng = lng + dlng return [ mglng , mglat ] def gcj02_to_wgs84 ( self ): \"\"\" gcj02\u5750\u6807\u7cfb\u8f6cwgs84 \"\"\" result = [] for i in self . data : result . append ( self . _gcj02_to_wgs84 ( i [ 0 ], i [ 1 ])) return result def _gcj02_to_wgs84 ( self , lng , lat ): \"\"\" \u79c1\u6709\u65b9\u6cd5\uff0c\u5750\u6807\u8f6c\u6362\u7684\u5177\u4f53\u7b97\u6cd5\uff0c\u5177\u4f53\u6d41\u7a0b\u5224\u65ad\u5f53\u524d\u5750\u6807\u662f\u5426\u5728\u56fd\u5185\uff0c\u5982\u679c\u975e\u56fd\u5185\uff0c\u8fd4\u56de\u5750\u6807\uff0c\u5982\u679c\u662f\u56fd\u5185\u5750\u6807\uff0c\u5219\u8fdb\u884c\u5750\u6807\u7cfb\u8f6c\u6362 \"\"\" if self . out_of_china ( lng , lat ): return lng , lat dlat = self . transform_lat ( lng - 105.0 , lat - 35.0 ) dlng = self . transform_lng ( lng - 105.0 , lat - 35.0 ) radlat = lat / 180.0 * self . pi magic = math . sin ( radlat ) magic = 1 - self . ee * magic * magic sqrtmagic = math . sqrt ( magic ) dlat = ( dlat * 180.0 ) / (( self . a * ( 1 - self . ee )) / ( magic * sqrtmagic ) * self . pi ) dlng = ( dlng * 180.0 ) / ( self . a / sqrtmagic * math . cos ( radlat ) * self . pi ) mglat = lat + dlat mglng = lng + dlng return [ lng * 2 - mglng , lat * 2 - mglat ] def transform_lat ( self , lng , lat ): \"\"\" \u7eac\u5ea6\u8f6c\u6362 \"\"\" ret = - 100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \\ 0.1 * lng * lat + 0.2 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lat * self . pi ) + 40.0 * math . sin ( lat / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 160.0 * math . sin ( lat / 12.0 * self . pi ) + 320 * math . sin ( lat * self . pi / 30.0 )) * 2.0 / 3.0 return ret def transform_lng ( self , lng , lat ): \"\"\" \u7ecf\u5ea6\u8f6c\u6362 \"\"\" ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \\ 0.1 * lng * lat + 0.1 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lng * self . pi ) + 40.0 * math . sin ( lng / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 150.0 * math . sin ( lng / 12.0 * self . pi ) + 300.0 * math . sin ( lng / 30.0 * self . pi )) * 2.0 / 3.0 return ret @staticmethod def out_of_china ( lng , lat ): \"\"\" \u5224\u65ad\u662f\u5426\u4e3a\u56fd\u5185\u5750\u6807\u51fd\u6570\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue\uff0c\u4e0d\u662f\u8fd4\u56deFalse \"\"\" if lng < 72.004 or lng > 137.8347 : return True if lat < 0.8293 or lat > 55.8271 : return True return False __init__ ( self , ** kwargs ) special 111\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c Source code in tools/CoordTransFormat.py def __init__ ( self , ** kwargs ): \"\"\" 111\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c \"\"\" self . x_pi = 3.14159265358979324 * 3000.0 / 180.0 self . pi = 3.1415926535897932384626 self . a = 6378245.0 # \u957f\u534a\u8f74 self . ee = 0.00669342162296594323 # \u6241\u7387 self . data = list () self . get_data ( ** kwargs ) self . check_data () check_data ( self ) \u6821\u9a8c\u6570\u636e\uff0c\u5177\u4f53\u6821\u9a8c\u6570\u636edata\u5e08\u8303\u4e3a\u7a7a\u4e14\u662f\u5426\u4e3alist\u683c\u5f0f\u6570\u636e Source code in tools/CoordTransFormat.py def check_data ( self ): \"\"\" \u6821\u9a8c\u6570\u636e\uff0c\u5177\u4f53\u6821\u9a8c\u6570\u636edata\u5e08\u8303\u4e3a\u7a7a\u4e14\u662f\u5426\u4e3alist\u683c\u5f0f\u6570\u636e \"\"\" if not self . data : raise Exception ( '\u8bf7\u91cd\u5199get_data\u65b9\u6cd5\u5e76\u8fd4\u56de\u6570\u636e\u5217\u8868' ) if not isinstance ( self . data , list ): raise Exception ( 'get_data\u65b9\u6cd5\u8bf7\u8fd4\u56delist\u683c\u5f0f\u6570\u636e' ) gcj02_to_wgs84 ( self ) gcj02\u5750\u6807\u7cfb\u8f6cwgs84 Source code in tools/CoordTransFormat.py def gcj02_to_wgs84 ( self ): \"\"\" gcj02\u5750\u6807\u7cfb\u8f6cwgs84 \"\"\" result = [] for i in self . data : result . append ( self . _gcj02_to_wgs84 ( i [ 0 ], i [ 1 ])) return result get_data ( self , * args , ** kwargs ) \u83b7\u53d6\u6570\u636e\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u91cd\u5199 Source code in tools/CoordTransFormat.py @abstractmethod def get_data ( self , * args , ** kwargs ): \"\"\" \u83b7\u53d6\u6570\u636e\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u91cd\u5199 \"\"\" pass out_of_china ( lng , lat ) staticmethod \u5224\u65ad\u662f\u5426\u4e3a\u56fd\u5185\u5750\u6807\u51fd\u6570\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue\uff0c\u4e0d\u662f\u8fd4\u56deFalse Source code in tools/CoordTransFormat.py @staticmethod def out_of_china ( lng , lat ): \"\"\" \u5224\u65ad\u662f\u5426\u4e3a\u56fd\u5185\u5750\u6807\u51fd\u6570\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue\uff0c\u4e0d\u662f\u8fd4\u56deFalse \"\"\" if lng < 72.004 or lng > 137.8347 : return True if lat < 0.8293 or lat > 55.8271 : return True return False transform_lat ( self , lng , lat ) \u7eac\u5ea6\u8f6c\u6362 Source code in tools/CoordTransFormat.py def transform_lat ( self , lng , lat ): \"\"\" \u7eac\u5ea6\u8f6c\u6362 \"\"\" ret = - 100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \\ 0.1 * lng * lat + 0.2 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lat * self . pi ) + 40.0 * math . sin ( lat / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 160.0 * math . sin ( lat / 12.0 * self . pi ) + 320 * math . sin ( lat * self . pi / 30.0 )) * 2.0 / 3.0 return ret transform_lng ( self , lng , lat ) \u7ecf\u5ea6\u8f6c\u6362 Source code in tools/CoordTransFormat.py def transform_lng ( self , lng , lat ): \"\"\" \u7ecf\u5ea6\u8f6c\u6362 \"\"\" ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \\ 0.1 * lng * lat + 0.1 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lng * self . pi ) + 40.0 * math . sin ( lng / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 150.0 * math . sin ( lng / 12.0 * self . pi ) + 300.0 * math . sin ( lng / 30.0 * self . pi )) * 2.0 / 3.0 return ret wgs84_to_gcj02 ( self ) wgs84\u5750\u6807\u7cfb\u8f6cgcj02 Source code in tools/CoordTransFormat.py def wgs84_to_gcj02 ( self ): \"\"\" wgs84\u5750\u6807\u7cfb\u8f6cgcj02 \"\"\" result = [] for i in self . data : result . append ( self . _wgs84_to_gcj02 ( i [ 0 ], i [ 1 ])) return result","title":"CoordTransFormat"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#coordtransformat","text":"\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c","title":"CoordTransFormat"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.Coord","text":"CoordClass\u7684\u5b50\u7c7b\uff0c\u5b9e\u73b0\u4e86\u7236\u7c7b\u7684get_data\u65b9\u6cd5 Source code in tools/CoordTransFormat.py class Coord ( CoordClass ): \"\"\" CoordClass\u7684\u5b50\u7c7b\uff0c\u5b9e\u73b0\u4e86\u7236\u7c7b\u7684get_data\u65b9\u6cd5 \"\"\" def get_data ( self , data ): \"\"\" \u5224\u65addata\u662f\u5b57\u5178\u6216\u6570\u7ec4\uff0c\u7edf\u4e00\u8f6c\u5316\u6210\u6570\u7ec4\u8fdb\u884c\u8f93\u51fa \"\"\" if isinstance ( data , dict ): self . data = list ( data . values ()) elif isinstance ( data , list ): self . data = data","title":"Coord"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.Coord.get_data","text":"\u5224\u65addata\u662f\u5b57\u5178\u6216\u6570\u7ec4\uff0c\u7edf\u4e00\u8f6c\u5316\u6210\u6570\u7ec4\u8fdb\u884c\u8f93\u51fa Source code in tools/CoordTransFormat.py def get_data ( self , data ): \"\"\" \u5224\u65addata\u662f\u5b57\u5178\u6216\u6570\u7ec4\uff0c\u7edf\u4e00\u8f6c\u5316\u6210\u6570\u7ec4\u8fdb\u884c\u8f93\u51fa \"\"\" if isinstance ( data , dict ): self . data = list ( data . values ()) elif isinstance ( data , list ): self . data = data","title":"get_data()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass","text":"Source code in tools/CoordTransFormat.py class CoordClass ( object ): def __init__ ( self , ** kwargs ): \"\"\" 111\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c \"\"\" self . x_pi = 3.14159265358979324 * 3000.0 / 180.0 self . pi = 3.1415926535897932384626 self . a = 6378245.0 # \u957f\u534a\u8f74 self . ee = 0.00669342162296594323 # \u6241\u7387 self . data = list () self . get_data ( ** kwargs ) self . check_data () @abstractmethod def get_data ( self , * args , ** kwargs ): \"\"\" \u83b7\u53d6\u6570\u636e\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u91cd\u5199 \"\"\" pass def check_data ( self ): \"\"\" \u6821\u9a8c\u6570\u636e\uff0c\u5177\u4f53\u6821\u9a8c\u6570\u636edata\u5e08\u8303\u4e3a\u7a7a\u4e14\u662f\u5426\u4e3alist\u683c\u5f0f\u6570\u636e \"\"\" if not self . data : raise Exception ( '\u8bf7\u91cd\u5199get_data\u65b9\u6cd5\u5e76\u8fd4\u56de\u6570\u636e\u5217\u8868' ) if not isinstance ( self . data , list ): raise Exception ( 'get_data\u65b9\u6cd5\u8bf7\u8fd4\u56delist\u683c\u5f0f\u6570\u636e' ) def wgs84_to_gcj02 ( self ): \"\"\" wgs84\u5750\u6807\u7cfb\u8f6cgcj02 \"\"\" result = [] for i in self . data : result . append ( self . _wgs84_to_gcj02 ( i [ 0 ], i [ 1 ])) return result def _wgs84_to_gcj02 ( self , lng , lat ): \"\"\" \u79c1\u6709\u65b9\u6cd5\uff0c\u5750\u6807\u8f6c\u6362\u7684\u5177\u4f53\u7b97\u6cd5\uff0c\u5177\u4f53\u6d41\u7a0b\u5224\u65ad\u5f53\u524d\u5750\u6807\u662f\u5426\u5728\u56fd\u5185\uff0c\u5982\u679c\u975e\u56fd\u5185\uff0c\u8fd4\u56de\u5750\u6807\uff0c\u5982\u679c\u662f\u56fd\u5185\u5750\u6807\uff0c\u5219\u8fdb\u884c\u5750\u6807\u7cfb\u8f6c\u6362 \"\"\" lng , lat = float ( lng ), float ( lat ) if self . out_of_china ( lng , lat ): # \u5224\u65ad\u662f\u5426\u5728\u56fd\u5185 return lng , lat dlat = self . transform_lat ( lng - 105.0 , lat - 35.0 ) dlng = self . transform_lng ( lng - 105.0 , lat - 35.0 ) radlat = lat / 180.0 * self . pi magic = math . sin ( radlat ) magic = 1 - self . ee * magic * magic sqrtmagic = math . sqrt ( magic ) dlat = ( dlat * 180.0 ) / (( self . a * ( 1 - self . ee )) / ( magic * sqrtmagic ) * self . pi ) dlng = ( dlng * 180.0 ) / ( self . a / sqrtmagic * math . cos ( radlat ) * self . pi ) mglat = lat + dlat mglng = lng + dlng return [ mglng , mglat ] def gcj02_to_wgs84 ( self ): \"\"\" gcj02\u5750\u6807\u7cfb\u8f6cwgs84 \"\"\" result = [] for i in self . data : result . append ( self . _gcj02_to_wgs84 ( i [ 0 ], i [ 1 ])) return result def _gcj02_to_wgs84 ( self , lng , lat ): \"\"\" \u79c1\u6709\u65b9\u6cd5\uff0c\u5750\u6807\u8f6c\u6362\u7684\u5177\u4f53\u7b97\u6cd5\uff0c\u5177\u4f53\u6d41\u7a0b\u5224\u65ad\u5f53\u524d\u5750\u6807\u662f\u5426\u5728\u56fd\u5185\uff0c\u5982\u679c\u975e\u56fd\u5185\uff0c\u8fd4\u56de\u5750\u6807\uff0c\u5982\u679c\u662f\u56fd\u5185\u5750\u6807\uff0c\u5219\u8fdb\u884c\u5750\u6807\u7cfb\u8f6c\u6362 \"\"\" if self . out_of_china ( lng , lat ): return lng , lat dlat = self . transform_lat ( lng - 105.0 , lat - 35.0 ) dlng = self . transform_lng ( lng - 105.0 , lat - 35.0 ) radlat = lat / 180.0 * self . pi magic = math . sin ( radlat ) magic = 1 - self . ee * magic * magic sqrtmagic = math . sqrt ( magic ) dlat = ( dlat * 180.0 ) / (( self . a * ( 1 - self . ee )) / ( magic * sqrtmagic ) * self . pi ) dlng = ( dlng * 180.0 ) / ( self . a / sqrtmagic * math . cos ( radlat ) * self . pi ) mglat = lat + dlat mglng = lng + dlng return [ lng * 2 - mglng , lat * 2 - mglat ] def transform_lat ( self , lng , lat ): \"\"\" \u7eac\u5ea6\u8f6c\u6362 \"\"\" ret = - 100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \\ 0.1 * lng * lat + 0.2 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lat * self . pi ) + 40.0 * math . sin ( lat / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 160.0 * math . sin ( lat / 12.0 * self . pi ) + 320 * math . sin ( lat * self . pi / 30.0 )) * 2.0 / 3.0 return ret def transform_lng ( self , lng , lat ): \"\"\" \u7ecf\u5ea6\u8f6c\u6362 \"\"\" ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \\ 0.1 * lng * lat + 0.1 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lng * self . pi ) + 40.0 * math . sin ( lng / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 150.0 * math . sin ( lng / 12.0 * self . pi ) + 300.0 * math . sin ( lng / 30.0 * self . pi )) * 2.0 / 3.0 return ret @staticmethod def out_of_china ( lng , lat ): \"\"\" \u5224\u65ad\u662f\u5426\u4e3a\u56fd\u5185\u5750\u6807\u51fd\u6570\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue\uff0c\u4e0d\u662f\u8fd4\u56deFalse \"\"\" if lng < 72.004 or lng > 137.8347 : return True if lat < 0.8293 or lat > 55.8271 : return True return False","title":"CoordClass"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.__init__","text":"111\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c Source code in tools/CoordTransFormat.py def __init__ ( self , ** kwargs ): \"\"\" 111\u7ecf\u7eac\u5ea6\u8f6c\u5316\u5de5\u5177\u62bd\u8c61\u7c7b\u5c01\u88c5\uff0cWGS-84(GPS)\u4e0eGCJ-02(\u9ad8\u5fb7)\u5750\u6807\u7cfb\u4e92\u8f6c \"\"\" self . x_pi = 3.14159265358979324 * 3000.0 / 180.0 self . pi = 3.1415926535897932384626 self . a = 6378245.0 # \u957f\u534a\u8f74 self . ee = 0.00669342162296594323 # \u6241\u7387 self . data = list () self . get_data ( ** kwargs ) self . check_data ()","title":"__init__()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.check_data","text":"\u6821\u9a8c\u6570\u636e\uff0c\u5177\u4f53\u6821\u9a8c\u6570\u636edata\u5e08\u8303\u4e3a\u7a7a\u4e14\u662f\u5426\u4e3alist\u683c\u5f0f\u6570\u636e Source code in tools/CoordTransFormat.py def check_data ( self ): \"\"\" \u6821\u9a8c\u6570\u636e\uff0c\u5177\u4f53\u6821\u9a8c\u6570\u636edata\u5e08\u8303\u4e3a\u7a7a\u4e14\u662f\u5426\u4e3alist\u683c\u5f0f\u6570\u636e \"\"\" if not self . data : raise Exception ( '\u8bf7\u91cd\u5199get_data\u65b9\u6cd5\u5e76\u8fd4\u56de\u6570\u636e\u5217\u8868' ) if not isinstance ( self . data , list ): raise Exception ( 'get_data\u65b9\u6cd5\u8bf7\u8fd4\u56delist\u683c\u5f0f\u6570\u636e' )","title":"check_data()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.gcj02_to_wgs84","text":"gcj02\u5750\u6807\u7cfb\u8f6cwgs84 Source code in tools/CoordTransFormat.py def gcj02_to_wgs84 ( self ): \"\"\" gcj02\u5750\u6807\u7cfb\u8f6cwgs84 \"\"\" result = [] for i in self . data : result . append ( self . _gcj02_to_wgs84 ( i [ 0 ], i [ 1 ])) return result","title":"gcj02_to_wgs84()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.get_data","text":"\u83b7\u53d6\u6570\u636e\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u91cd\u5199 Source code in tools/CoordTransFormat.py @abstractmethod def get_data ( self , * args , ** kwargs ): \"\"\" \u83b7\u53d6\u6570\u636e\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u91cd\u5199 \"\"\" pass","title":"get_data()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.out_of_china","text":"\u5224\u65ad\u662f\u5426\u4e3a\u56fd\u5185\u5750\u6807\u51fd\u6570\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue\uff0c\u4e0d\u662f\u8fd4\u56deFalse Source code in tools/CoordTransFormat.py @staticmethod def out_of_china ( lng , lat ): \"\"\" \u5224\u65ad\u662f\u5426\u4e3a\u56fd\u5185\u5750\u6807\u51fd\u6570\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue\uff0c\u4e0d\u662f\u8fd4\u56deFalse \"\"\" if lng < 72.004 or lng > 137.8347 : return True if lat < 0.8293 or lat > 55.8271 : return True return False","title":"out_of_china()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.transform_lat","text":"\u7eac\u5ea6\u8f6c\u6362 Source code in tools/CoordTransFormat.py def transform_lat ( self , lng , lat ): \"\"\" \u7eac\u5ea6\u8f6c\u6362 \"\"\" ret = - 100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \\ 0.1 * lng * lat + 0.2 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lat * self . pi ) + 40.0 * math . sin ( lat / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 160.0 * math . sin ( lat / 12.0 * self . pi ) + 320 * math . sin ( lat * self . pi / 30.0 )) * 2.0 / 3.0 return ret","title":"transform_lat()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.transform_lng","text":"\u7ecf\u5ea6\u8f6c\u6362 Source code in tools/CoordTransFormat.py def transform_lng ( self , lng , lat ): \"\"\" \u7ecf\u5ea6\u8f6c\u6362 \"\"\" ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \\ 0.1 * lng * lat + 0.1 * math . sqrt ( math . fabs ( lng )) ret += ( 20.0 * math . sin ( 6.0 * lng * self . pi ) + 20.0 * math . sin ( 2.0 * lng * self . pi )) * 2.0 / 3.0 ret += ( 20.0 * math . sin ( lng * self . pi ) + 40.0 * math . sin ( lng / 3.0 * self . pi )) * 2.0 / 3.0 ret += ( 150.0 * math . sin ( lng / 12.0 * self . pi ) + 300.0 * math . sin ( lng / 30.0 * self . pi )) * 2.0 / 3.0 return ret","title":"transform_lng()"},{"location":"%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8C%B9%E9%85%8D/%E6%A6%82%E8%BF%B0/#lat_lng.tools.CoordTransFormat.CoordClass.wgs84_to_gcj02","text":"wgs84\u5750\u6807\u7cfb\u8f6cgcj02 Source code in tools/CoordTransFormat.py def wgs84_to_gcj02 ( self ): \"\"\" wgs84\u5750\u6807\u7cfb\u8f6cgcj02 \"\"\" result = [] for i in self . data : result . append ( self . _wgs84_to_gcj02 ( i [ 0 ], i [ 1 ])) return result","title":"wgs84_to_gcj02()"}]}